import React, {useState, useRef, useEffect} from "react";
import { StyleSheet, Text, View, Button, TouchableOpacity, Alert,
 SafeAreaView, Image, Platform } from 'react-native';
 import * as ImagePicker from 'expo-image-picker';
 import Constants from 'expo-constants';
 import RangeSlider, { Slider } from 'react-native-range-slider-expo';

export default function HeatmapSettingsScreen(props){
    const [heatmapData, setHeatmapData] = useState(
        [[273, 628, 1], [138, 589, 1], [83, 578, 1], [65, 604, 1], [32, 604, 1], [304, 614, 10], [304, 620, 23],
         [279, 628, 2], [279, 628, 1], [296, 626, 1], [430, 592, 2], [430, 592, 1], [362, 570, 1], [351, 572, 1], [342, 577, 1], 
         [342, 583, 2], [342, 583, 1], [352, 580, 1], [352, 568, 1], [364, 608, 3], [362, 600, 7], [333, 611, 23], [362, 600, 6], 
         [333, 611, 22], [341, 603, 20], [236, 587, 1], [186, 593, 1], [197, 657, 1], [164, 672, 1], [183, 669, 1], [182, 661, 1], 
         [224, 653, 1], [220, 662, 1], [229, 628, 1], [213, 600, 1], [225, 600, 2], [225, 600, 1], [249, 595, 1], [286, 616, 64], 
         [301, 604, 2], [284, 472, 1], [470, 54, 1], [462, 48, 1], [462, 56, 1], [477, 40, 1], [485, 61, 1], [103, 640, 1], [320, 582, 1], 
         [30, 615, 1], [335, 572, 1], [335, 566, 1], [314, 573, 3], [314, 567, 1], [296, 566, 1], [156, 583, 1], [167, 582, 1], 
         [125, 577, 2], [102, 584, 1], [235, 593, 1], [304, 620, 22], [122, 588, 1], [116, 593, 1], [440, 65, 1], [414, 72, 1], [232, 642, 1], [186, 642, 1], [149, 622, 1], [127, 616, 1], [140, 617, 1], [102, 612, 1], [154, 602, 1], [141, 639, 1], [268, 634, 2], [309, 622, 1], [464, 0, 1], [35, 591, 1], [286, 616, 63], [286, 616, 62], [270, 578, 3], [270, 571, 1], [253, 583, 3], [301, 604, 1], [270, 586, 1], [253, 583, 2], [270, 585, 2], [125, 577, 1], [270, 585, 1], [253, 589, 1], [270, 592, 2], [253, 583, 1], [253, 588, 1], [253, 549, 1], [253, 529, 1], [293, 589, 2], [279, 622, 22], [263, 643, 1], [268, 632, 1], [263, 633, 1], [296, 607, 4], [286, 616, 61], [279, 622, 21], [304, 614, 9], [314, 606, 22], [286, 616, 60], [314, 606, 21], [286, 616, 59], [286, 616, 58], [286, 616, 57], [279, 622, 20], [286, 616, 56], [279, 622, 19], [286, 616, 55], [286, 616, 54], [314, 606, 20], [286, 616, 53], [304, 614, 8], [286, 616, 52], [286, 616, 51], [286, 616, 50], [314, 606, 19], [286, 616, 49], [304, 614, 7], [286, 616, 48], [286, 616, 47], [286, 616, 46], [286, 616, 45], [286, 616, 44], [314, 606, 18], [286, 616, 43], [286, 616, 42], [304, 614, 6], [286, 616, 41], [279, 622, 18], [286, 616, 40], [286, 616, 39], [286, 616, 38], [314, 606, 17], [286, 616, 37], [279, 622, 17], [286, 616, 36], [279, 622, 16], [286, 616, 35], [286, 616, 34], [314, 606, 16], [286, 616, 33], [286, 616, 32], [279, 622, 15], [279, 622, 14], [279, 622, 13], [304, 614, 5], [286, 616, 31], [286, 616, 30], [314, 606, 15], [286, 616, 29], [286, 616, 28], [286, 616, 27], [286, 616, 26], [286, 616, 25], [286, 616, 24], [286, 616, 23], [286, 616, 22], [286, 616, 21], [279, 622, 12], [286, 616, 20], [286, 616, 19], [286, 616, 18], [286, 616, 17], [314, 606, 14], [279, 622, 11], [314, 606, 13], [314, 606, 12], [304, 614, 4], [314, 606, 11], [286, 616, 16], [314, 606, 10], [304, 614, 3], [286, 616, 15], [304, 614, 2], [314, 606, 9], [314, 606, 8], [314, 612, 19], [304, 626, 11], [341, 609, 9], [314, 606, 7], [283, 580, 2], [283, 580, 1], [253, 502, 1], [293, 589, 1], [289, 567, 2], [272, 571, 1], [264, 562, 1], [289, 561, 1], [251, 444, 1], [452, 72, 1], [186, 669, 1], [453, 305, 1], [20, 599, 1], [296, 613, 2], [257, 1000, 1], [279, 622, 10], [283, 586, 1], [296, 613, 1], [314, 612, 18], [286, 616, 14], [286, 616, 13], [279, 622, 9], [327, 566, 1], [304, 614, 1], [270, 566, 1], [270, 578, 2], [314, 606, 6], [314, 606, 5], [286, 616, 12], [253, 590, 1], [286, 616, 11], [286, 622, 2], [286, 616, 10], [314, 573, 2], [306, 573, 1], [314, 573, 1], [308, 565, 1], [316, 565, 1], [296, 572, 1], [286, 616, 9], [259, 566, 1], [277, 566, 1], [231, 625, 2], [296, 607, 3], [253, 514, 1], [301, 570, 1], [286, 616, 8], [286, 616, 7], [286, 616, 6], [286, 616, 5], [269, 567, 1], [268, 634, 1], [270, 592, 1], [279, 622, 8], [239, 612, 1], [231, 625, 1], [223, 617, 1], [296, 607, 2], [286, 628, 4], [314, 606, 4], [286, 616, 4], [320, 598, 2], [296, 607, 1], [320, 598, 1], [314, 612, 17], [314, 612, 16], [314, 612, 15], [286, 616, 3], [279, 622, 7], [286, 622, 1], [314, 630, 2], [279, 622, 6], [314, 606, 3], [279, 622, 5], [286, 616, 2], [279, 622, 4], [314, 618, 10], [286, 616, 1], [279, 622, 3], [279, 622, 2], [314, 606, 2], [279, 622, 1], [314, 606, 1], [87, 644, 1], [296, 619, 2], [296, 619, 1], [320, 610, 2], [286, 628, 3], [286, 628, 2], [286, 628, 1], [239, 658, 1], [341, 603, 19], [304, 620, 21], [341, 609, 8], [314, 618, 9], [314, 618, 8], [92, 593, 1], [52, 586, 1], [76, 588, 1], [314, 612, 14], [181, 592, 1], [176, 665, 1], [260, 638, 1], [275, 648, 1], [320, 610, 1], [270, 491, 1], [314, 612, 13], [314, 612, 12], [314, 612, 11], [314, 618, 7], [333, 617, 11], [270, 502, 1], [341, 603, 18], [333, 617, 10], [314, 612, 10], [333, 611, 21], [304, 620, 20], [333, 611, 20], [362, 612, 1], [101, 588, 1], [258, 599, 1], [339, 600, 4], [312, 567, 1], [255, 636, 1], [313, 637, 1], [289, 567, 1], [341, 603, 17], [362, 600, 5], [333, 611, 19], [52, 616, 1], [339, 600, 3], [341, 603, 16], [287, 485, 1], [287, 500, 1], [235, 413, 1], [261, 465, 1], [193, 389, 1], [260, 439, 1], [270, 530, 1], [500, 617, 1], [362, 600, 4], [289, 577, 1], [113, 616, 1], [192, 617, 1], [119, 608, 1], [70, 587, 1], [65, 592, 1], [44, 596, 1], [26, 590, 1], [201, 594, 1], [304, 626, 10], [362, 594, 3], [314, 618, 6], [314, 612, 9], [341, 603, 15], [304, 620, 19], [304, 620, 18], [364, 602, 6], [304, 620, 17], [341, 603, 14], [314, 618, 5], [364, 602, 5], [333, 611, 18], [362, 600, 3], [314, 618, 4], [304, 626, 9], [341, 603, 13], [333, 611, 17], [304, 620, 16], [333, 617, 9], [314, 612, 8], [304, 626, 8], [304, 626, 7], [314, 612, 7], [333, 611, 16], [314, 612, 6], [333, 611, 15], [341, 603, 12], [314, 618, 3], [304, 620, 15], [341, 603, 11], [314, 612, 5], [364, 602, 4], [333, 611, 14], [362, 594, 2], [270, 584, 1], [333, 617, 8], [364, 602, 3], [333, 611, 13], [341, 603, 10], [341, 609, 7], [341, 603, 9], [333, 611, 12], [341, 609, 6], [364, 608, 2], [304, 620, 14], [304, 620, 13], [304, 620, 12], [333, 611, 11], [304, 620, 11], [388, 593, 1], [376, 576, 1], [346, 575, 1], [341, 609, 5], [333, 617, 7], [333, 611, 10], [304, 620, 10], [270, 578, 1], [316, 607, 1], [306, 598, 1], [270, 546, 1], [341, 603, 8], [269, 573, 1], [287, 587, 1], [287, 607, 1], [284, 466, 1], [339, 600, 2], [341, 609, 4], [304, 626, 6], [333, 611, 9], [333, 611, 8], [333, 611, 7], [314, 630, 1], [341, 603, 7], [314, 618, 2], [341, 609, 3], [333, 617, 6], [304, 620, 9], [304, 620, 8], [341, 603, 6], [347, 577, 1], [349, 574, 1], [345, 580, 1], [314, 618, 1], [333, 611, 6], [333, 617, 5], [362, 600, 2], [0, 594, 1], [260, 617, 1], [253, 608, 1], [333, 611, 5], [362, 600, 1], [341, 603, 5], [333, 617, 4], [304, 620, 7], [341, 609, 2], [314, 612, 4], [341, 609, 1], [333, 617, 3], [364, 608, 1], [362, 594, 1], [304, 620, 6], [304, 626, 5], [304, 620, 5], [333, 611, 4], [429, 592, 1], [440, 602, 1], [304, 620, 4], [364, 602, 2], [331, 585, 1], [233, 576, 1], [333, 611, 3], [333, 611, 2], [314, 612, 3], [304, 620, 3], [341, 603, 4], [304, 620, 2], [333, 611, 1], [304, 626, 4], [21, 600, 1], [304, 626, 3], [304, 626, 2], [341, 603, 3], [314, 612, 2], [333, 617, 2], [314, 612, 1], [304, 620, 1], [341, 603, 2], [339, 600, 1], [364, 602, 1], [304, 626, 1], [327, 578, 2], [327, 578, 1], [341, 603, 1], [333, 617, 1]],
      );
    
    const [slicedHeatmapData, setSlicedHeatmapData]= useState(
        heatmapData.slice(fromValue,toValue)
    );
    



        useEffect(() => {
            (async () => {
              if (Platform.OS !== 'web') {
                const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
                if (status !== 'granted') {
                  alert('Sorry, we need camera roll permissions to make this work!');
                }
              }
            })();
          }, []);//Component Did Mount

        const [gradient, setGradient] = useState({0.4: 'blue', 0.65: 'lime', 1: 'red'});

        const [heatmapImage, setHeatmapImage] = useState(null);
        const [fromValue, setFromValue] = useState(250);
        const [toValue, setToValue] = useState(750);
        const [rangeValue, setRangeValue] = useState(0);

        const pickImage = async () => {
            let result = await ImagePicker.launchImageLibraryAsync({
              mediaTypes: ImagePicker.MediaTypeOptions.All,
              allowsEditing: true,
              aspect: [4, 3],
              quality: 1,
            });
        
            console.log(result);
        
            if (!result.cancelled) {
              setHeatmapImage(result.uri);
            }
          };
        
        
        
    return (
           <SafeAreaView style = {styles.container}>
            <Text style ={styles.boldedTitleText}>Heatmap Display Settings</Text>
            
            <TouchableOpacity 
                onPress = {pickImage}
                style= {styles.smallButton}>
                <Text>Select Image Of Workspace To Overlay Heatmap On</Text>
            </TouchableOpacity>

                {heatmapImage && <Image source={{ uri: heatmapImage }} style={{ width: 200, height: 200, marginTop: 30, marginBottom: 30 }} />}

                <Text style = {styles.titleText}>Range of Values to Generate Heatmap</Text>
                <RangeSlider min={1} max={1000}
                         fromValueOnChange={rangeValue => { 
                             setFromValue(rangeValue); 
                             setSlicedHeatmapData(heatmapData.slice(fromValue,toValue));
                            }}
                         toValueOnChange={rangeValue => {
                             setToValue(rangeValue);
                             setSlicedHeatmapData(heatmapData.slice(fromValue,toValue));
                            }}
                         initialFromValue={250}
                         initialToValue = {750}
                         fromKnobColor = "#b3d0ff"
                         toKnobColor = "#b3d0ff"
                    />
            <TouchableOpacity 
                onPress = {() => props.navigation.navigate("DisplayHeatmap", {slicedHeatmapData, heatmapImage})}
                style= {styles.button}>
                <Text>Generate Heatmap With These Settings</Text>
                </TouchableOpacity>

        </SafeAreaView>



        
    )
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#ffedd9',
        alignItems: 'center',
        justifyContent: 'flex-start',
        flexDirection: "column",
        textAlign: "center"
      },
      titleText: {
        marginTop: 30,
        marginBottom: 30,
        fontSize: 30,
        textAlign: "center"
    },

    boldedTitleText: {
        marginTop: 30,
        marginBottom: 30,
        fontSize: 30,
        textAlign: "center",
        fontWeight: "bold"
        
    },

    register: {
        display: "flex",
        flexDirection: "row",
        width: "70%"
    },

    registerInput: {
        borderWidth: 1,
        borderColor: "black",
        width: "70%"
    },

    button: {
        alignItems: "center",
        backgroundColor: "#b3d0ff",
        padding: 20,
        borderRadius: 20

    },
    smallButton: {
        alignItems: "center",
        backgroundColor: "#b3d0ff",
        padding: 10,
        borderRadius: 20,
        width: "60%"

        
    }
  });